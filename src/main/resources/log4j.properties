##配置根Logger
#log4j.rootLogger  =   [ level ]   ,  appenderName1 ,  appenderName2 ,  …
#其中 [level] 是日志输出级别，共有5级
#FATAL      0
#ERROR      3
#WARN       4
#INFO       6
#DEBUG      7

##配置日志信息输出目的地Appender
#log4j.appender.appenderName  =  fully.qualified.name.of.appender.class
#　　log4j.appender.appenderName.option1  =  value1
#　　…
#　　log4j.appender.appenderName.optionN  =  valueN
#Appender 为日志输出目的地，Log4j提供的appender有以下几种：
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#
#配置日志信息的格式（布局）
#log4j.appender.appenderName.layout  =  fully.qualified.name.of.layout.class
#　　log4j.appender.appenderName.layout.option1  =  value1
#　　…
#　　log4j.appender.appenderName.layout.optionN  =  valueN
#Layout：日志输出格式，Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:
# 　  %m   输出代码中指定的消息
#　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数
#　　%c   输出所属的类目，通常就是所在类的全名
#　　%t   输出产生该日志事件的线程名
#　　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )






#   ------------------------------------------
#   ------------------------------------------
#   ----------------start---------------------
# This is the configuring for logging displayed in the Application Server
# log4j.rootCategory=WARN, R

# Replace the line above if you want to put a log file into the directory
# you start Tomcat from
### set log levels ###
log4j.rootCategory=INFO, stdout , R, E

### 输出到控制台 ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# Pattern to output the caller's file name and line number.
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} [%p] \=\=\=\= %t\: %c.%M(%L)\r\n\t%m%n\r\n

#log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#单独定义该包下文件为debug级别
log4j.logger.com.java.nba=DEBUG
# You can change this to be an absolute path or even an environment variable
# If you're using an environment variable, you will have to set JAVA_OPTS
# to contain this variables - for example in the catalina.sh or catalina.bat
# file

#### 输出到日志文件 ###
log4j.appender.R.File=logs/log.log

#log4j.appender.R.MaxFileSize=20240KB

# Don't keep a backup file
#log4j.appender.R.MaxBackupIndex=0

log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} [%p] \=\=\=\= %t\: %c.%M(%L)\r\n\t%m%n\r\n
#log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 保存异常信息到单独文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
## 异常日志文件名
log4j.appender.E.File = logs/error.log
log4j.appender.E.Append = true
## 只输出ERROR级别以上的日志!!!
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
#  ----------------end---------------------

#https://blog.csdn.net/zhshulin/article/details/37937365  日志博客链接